//  main.cpp
//  AssingAgust
//
//  Created by Leonardo Aureliano on 2022-07-30.

#include <iostream>
using namespace std;

class Polynomial
{
private:
    double *array;
    int x;
    
public:
    
    Polynomial();//constructor = 0
    Polynomial(double array[], int x);
    Polynomial(Polynomial&);//copy constructor
    Polynomial(double);//constructor
    ~Polynomial(){delete array;} //Destructor
    
    Polynomial operator-(Polynomial p) const;
    Polynomial operator*(Polynomial p) const;
};

//Default constructor, to start everything with 0.
Polynomial::Polynomial() {
    x = 0;
    array = new double[x * x * x + x + 1];//dynamic array with the required value
    array[0] = 0;
}

Polynomial::Polynomial(double array[], int nterms){
    x = nterms;
    array = new double[x]; //array to hold coefficient values
    for(int i = 0; i < x; i++)
        array[i] = array[i];
}
Polynomial::Polynomial(Polynomial&){

}

Polynomial add(const Polynomial& other) const
{
    return Vector2(array +other.array[array +1])
}


Polynomial operator+ (const Polynomial& other) const{
    return add(other);
}



int main() {
    
    Polynomial numbers(2);
    
    return 0;
}
